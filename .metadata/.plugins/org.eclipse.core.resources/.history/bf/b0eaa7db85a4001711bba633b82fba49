package adri.logviewer.service;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.List;
import java.util.regex.Matcher;
import java.util.regex.Pattern;

import org.apache.commons.io.FilenameUtils;
import org.springframework.context.ApplicationContext;
import adri.logviewer.agent.client.Client;
import adri.logviewer.agent.file.LogFile;
import adri.logviewer.exception.PermissionException;
import adri.logviewer.filemanager.Fichier;
import adri.logviewer.model.Agent;
import adri.logviewer.model.Utilisateur;

public class FileService {
	private String filePath = "LogViewer-Fichiers/";
	private static FileService service;
	
	private FileService(){}
	public static FileService getInstance(ApplicationContext context, Utilisateur user) throws Exception{
		try{
			if(!user.isGenerallyAllowed("Fichier")){
				throw new PermissionException("Vous n'etes pas autorisé à effectuer ces opérations");
			}
			if(service == null){
				service = (FileService)context.getBean("fileService");
			}
			return service;
		}catch(Exception e){
			e.printStackTrace();
			throw e;
		}
	}

	public LogFile connect(Agent agent) throws Exception{
		Client client = null;
		try{
			client = new Client();
			return (LogFile)client.connect(agent.getAdresse(), agent.getPort());
		}finally{
			if(client != null){
				client.dispose();
			}
		}
	}
	public void openFile(Agent agent, LogFile file) throws Exception{
		Client client = null;
		try{
			client = new Client(file);
			if(file.getTempFile() == null){
				try {
					String extension = file.getFileName().substring(file.getFileName().lastIndexOf('.'));
					File tempFile = File.createTempFile(file.getFileName(), extension);
					tempFile.deleteOnExit();
					file.setTempFile(tempFile);
				} catch (StringIndexOutOfBoundsException e) {
					LogFile list = (LogFile)client.connect(agent.getAdresse(), agent.getPort());
					file.setChild(list.getChild());
					file.setFileName(list.getFileName());
					throw new IllegalArgumentException("Ce fichier correspond à un dossier");
				}
			}
			client.connect(agent.getAdresse(), agent.getPort());
		}finally{
			if(client != null){
				client.dispose();
			}
		}
	}
	
	public void saveFile(Utilisateur user, Agent agent, LogFile logfile) throws Exception{
		File save = null;
		File path = null;
		try {
			String agentPath = getRootPath(user);
			path = new File(agentPath);
			if(!path.exists()){
				path.mkdirs();
			}
			if(!logfile.getTempFile().exists()){
				throw new FileNotFoundException("Ce fichier n'est plus en cache ou a été déplacé");
			}
			String date = new SimpleDateFormat("yyyyMMddHHmmss").format(new Date());
			String name = date + logfile.getFileName().replaceAll("(\\\\|/|:|\\*|\\?|\"|<|>|\\|)", "^");
			save = new File(path.getAbsolutePath() + File.separator + name);
			if(!logfile.getTempFile().renameTo(save)){
				System.out.println(logfile.getTempFile().getAbsolutePath());
				System.out.println(save.getAbsolutePath());
				throw new Exception("Le fichier n'a pas pu etre sauvegardé");
			}
			logfile.setFileName(name);
			logfile.setTempFile(save);
		} catch (Exception e) {
			throw e;	
		}
	}
	public void downloadFile(LogFile logfile, OutputStream out)throws Exception{
		FileInputStream read = null;
		byte[] buffer = new byte[1024];
		try {
			int reader;
			read = new FileInputStream(logfile.getTempFile());
			while((reader = read.read(buffer)) != -1){
				out.write(reader);	
			}
		} catch (Exception e) {
			System.out.println("Téléchargement impossible");
		} finally{
			if(read != null){
				read.close();
			}
		}
	}
	public String getFilePath(Utilisateur user) throws Exception {
		File f = new File(filePath);
		if(!f.exists()){
			f.mkdir();
		}
		if(user.isSuperUtilisateur()){
			return f.getAbsolutePath();
		}
		else if(user.getProfil() != null){
			String base = getRootPath(user);
			if(!new File(base).exists()){
				throw new Exception("Aucun fichier n'a encore été enregistré dans votre profil");
			}
			return base;
		}
		throw new PermissionException("Vous n'etes rattaché à aucun profil");
	}
	public String getRootPath(Utilisateur user){
		return filePath + File.separator + user.getProfil().getNom();
	}
	public File getRootPathFile(Utilisateur user){
		return new File(getRootPath(user));
	}
	public void setFilePath(String filePath) {
		this.filePath = filePath;
	}
	public Agent getAgent(File file) throws Exception{
		try{
			String nameAgent = file.getParentFile().getName();
			Pattern p = Pattern.compile("Agent([0-9]+)-(.*)");
			Matcher m = p.matcher(nameAgent);
			if(m.matches()){
				String id = m.group(1);
				return new Agent(Integer.parseInt(id));
			}
			throw new Exception("Agent introuvable.");
		}catch(NumberFormatException e){
			throw new Exception("Agent invalide");
		}
	}
	public Fichier parseFile(Agent agent, File file, int line, int maxLine, boolean force, String level)throws Exception{
		Fichier f = new Fichier(agent.getSyntaxe(), file, line, maxLine, force, level);
		f.parseFile();
		return f;
	}
}
