package adri.logviewermain.filemanager;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.Arrays;
import java.util.List;
import java.util.NoSuchElementException;
import java.util.Vector;
import java.util.regex.*;

import adri.logviewermain.exception.InputException;

public class Fichier {
	
	private List<String> pattern;
	private String datePattern = "yyyy-MM-dd HH:mm:ss,SSS";
	private File fichier;
	private Vector<Log> listeLog;
	private String patternRegex = ""; 
	
	public Fichier(String pattern, String chemin) throws Exception {
		this.setPatternRegex(pattern);
		this.setFichier(chemin);
	}

	public String getPatternRegex() {
		return this.patternRegex;
	}
//	public void setPatternRegex(String patternRegex){
//		this.patternRegex = patternRegex;
//	}
	public void addPatternRegex(String pattern){
		this.setPatternRegex(this.patternRegex.concat(pattern));
	}

	public List<String> getPattern() {
		return pattern;
	}
	private void setPattern(List<String> pattern) {
		this.pattern = pattern;
	}
//	public void setPattern(String pattern) {
//		Pattern datePattern = Pattern.compile("(.*)(TIMESTAMP)\\{(.*)\\}(.*)");
//		Matcher m = datePattern.matcher(pattern);
//		if(m.find()){
//			this.setDatePattern(m.group(3));
//			pattern = m.group(1) + m.group(2) + m.group(4);
//		}
//		this.setPattern(pattern.trim().split(" "));
//	}
	public void setPatternRegex(String pattern) {
		Pattern datePattern = Pattern.compile("(.*)(TIMESTAMP)\\{(.*)\\}(.*)");
		Matcher m = datePattern.matcher(pattern);
		if(m.find()){
			this.setDatePattern(m.group(3));
			pattern = m.group(1) + m.group(2) + m.group(4);
		}
		pattern = pattern.replaceAll("(TIMESTAMP)\\{(.*)\\}", );
		pattern = pattern.replaceAll("([\\p{Punct}])", "\\\\$0");
		pattern = pattern.replaceAll("([A-Z]+)", "(?<$0>.*)");
	}
//	public void setPattern(String[] pattern) {
//		setPattern(new Vector<String>());
//		Pattern fieldPattern = Pattern.compile("([\\p{Punct}])([A-Z]*)([\\p{Punct}])");
//		for(int i = 0; i<pattern.length; i++){
//			String p1 = "";
//			String p2 = " ";
//			String value = "(.*)";
//			getPattern().add(pattern[i]);
//			Matcher m = fieldPattern.matcher(pattern[i]);
//			if(m.matches()){
//				p1 = "\\" + m.group(1);
//				getPattern().set(i, m.group(2));
//				p2 = "\\" + m.group(3) + " ";
//			}else if(Pattern.matches("([\\p{Punct}])", pattern[i])){
//				value = pattern[i];
//				getPattern().remove(i);
//			}
//			this.addPatternRegex(p1 + value + p2);
//		}
//		this.setPatternRegex(this.getPatternRegex().trim());
//		this.addPatternRegex("$");
//	}
	public static void main(String[] args) throws Exception {
		String s = "TIMESTAMP{yyyy-MM-dd HH:mm:ss.SSS} [THREAD] LEVEL CLASS - MESSAGE";
//		String s = "TIMESTAMP [THREAD] LEVEL CLASS - MESSAGE";
//		s = s.replaceAll("([\\p{Punct}])", "\\\\$0");
//		System.out.println(s);
//		s = s.replaceAll("([A-Z]+)", "(?<$0>.*)");
//		System.out.println(s);
		Fichier f = new Fichier(s,"A:/Projet/Projet Stage/logviewer/logs/app.log");
		System.out.println(f.datePattern);
		System.out.println(f.patternRegex);
		System.out.println(Arrays.toString(f.getPattern().toArray()));
		System.out.println(Arrays.toString(f.getListeLog().toArray()));
	}

	public String getDatePattern() {
		return datePattern;
	}
	public void setDatePattern(String datePattern) {
		if(datePattern != null && !datePattern.isEmpty()){
			this.datePattern = datePattern;
		}
	}
	
	public File getFichier() {
		return fichier;
	}
	public void setFichier(File fichier) throws Exception {
		this.fichier = fichier;
		parseFile();
	}
	public void setFichier(String chemin) throws Exception  {
		File file = new File(chemin);
		if(!file.exists() || file.isDirectory()){
			throw new InputException("Fichier invalide");
		}
		else if(file.isFile() && file.getName().endsWith(".log")){
			setFichier(file);
		}
	}
	
	public Vector<Log> getListeLog() {
		return listeLog;
	}
	public void setListeLog(Vector<Log> listeLog) {
		this.listeLog = listeLog;
	}
	public void addLog(Log log){
		if(this.getListeLog() == null){
			this.setListeLog(new Vector<Log>());
		}
		this.getListeLog().add(log);
	}
	
	public void parseFile() throws Exception{
		if(this.getFichier() == null){
			throw new Exception("Fichier introuvable");
		}
		FileReader fileReader = null;
		BufferedReader bufferedReader = null;
		try {
			fileReader = new FileReader(this.getFichier());
			bufferedReader = new BufferedReader(fileReader);
			String line;
			Pattern	pattern = Pattern.compile(getPatternRegex());
			
			while ((line = bufferedReader.readLine()) != null) {
				try{
					Matcher m = pattern.matcher(line);
					Log log = null;
					if(m.matches()){
						log = new Log();
						for(int i = 0; i<getPattern().size(); i++){
							switch (getPattern().get(i)) {
								case "TIMESTAMP" : log.setDate(m.group(i+1),this.getDatePattern());
								break;
								case "CLASS" : log.setClasse(m.group(i+1));
								break;
								case "METHOD" : log.setMethod(m.group(i+1));
								break;
								case "LEVEL" : log.setPriority(m.group(i+1));
								break;
								case "THREAD" : log.setThread(m.group(i+1));
								break;
								case "MESSAGE" : log.setMessage(m.group(i+1));
								break;
							default:
								break;
							}
						}
						addLog(log);
					}
					else{
						getListeLog().lastElement().addDetails(line);
					}
				}catch(NoSuchElementException e){
					continue;
				}catch (NullPointerException e) {
					continue;
				}
			}
		} catch (Exception e) {
			throw e;
		} finally{
			if(fileReader != null) fileReader.close();
			if(bufferedReader != null) bufferedReader.close();
		}
	}
}
