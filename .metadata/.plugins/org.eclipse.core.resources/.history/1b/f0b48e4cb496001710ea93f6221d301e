package agent;

import java.net.InetSocketAddress;
import java.nio.charset.Charset;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;

import javax.net.ssl.SSLContext;

import org.apache.mina.core.RuntimeIoException;
import org.apache.mina.core.future.ConnectFuture;
import org.apache.mina.core.future.ReadFuture;
import org.apache.mina.core.service.IoConnector;
import org.apache.mina.core.session.IdleStatus;
import org.apache.mina.core.session.IoSession;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.filter.codec.serialization.ObjectSerializationDecoder;
import org.apache.mina.filter.codec.textline.TextLineEncoder;
import org.apache.mina.filter.logging.LoggingFilter;
import org.apache.mina.filter.ssl.SslFilter;
import org.apache.mina.transport.socket.nio.NioSocketConnector;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Client{
	
    private final Logger LOGGER = LoggerFactory.getLogger(this.getClass());
    private NioSocketConnector client;
	private SslFilter sslFilter;
	IoSession session;
	
	public Object connect(String host, int port, LogFile log) throws Exception{
		IoConnector client = createClient(log);
		for(int i = 0; i<5; i++){
			try {
				ConnectFuture connexion = client.connect(new InetSocketAddress(host, port));
				connexion.awaitUninterruptibly();
				setSession(connexion.getSession());
				System.out.println("Connecté");
				LOGGER.trace("Utilisateur connecté");
				session.write(log != null ? log.getFileName() : "");
				ReadFuture read = session.read();
				read.awaitUninterruptibly();
				return read.getMessage();
			} catch (RuntimeIoException e) {
				Thread.sleep(5000);
				e.printStackTrace();
			}
		}
		throw new Exception("Connexion impossible");
	}
	private IoConnector createClient(LogFile log){
		IoConnector connector = new NioSocketConnector();
		client.setConnectTimeoutMillis(30000);
	    client.setConnectTimeoutCheckInterval(5000);
		
		client.getFilterChain().addFirst("sslFilter",
	    		createSslFilter());
		connector.getFilterChain().addLast( "logger", new LoggingFilter() );
		if(log != null){
			connector.getFilterChain().addLast("cache", new FileCacheFilter(log));
		}
		ObjectSerializationDecoder decoder = new ObjectSerializationDecoder();
		connector.getFilterChain().addLast( "codec", new ProtocolCodecFilter(new TextLineEncoder(Charset.forName("UTF-8")), decoder));
		connector.setHandler(new ClientHandler());
		connector.getSessionConfig().setReadBufferSize(2048);
		connector.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE, 30);
		connector.getSessionConfig().setUseReadOperation(true);
		return connector;
	}
	private SslFilter createSslFilter() throws NoSuchAlgorithmException, KeyManagementException {
	    SSLContext context = SSLContext.getInstance("TLS");
	    context.init(null, null, null);
	    SslFilter ssl = new SslFilter(context);
	    ssl.setUseClientMode(true);
	    return ssl;
	}
	private void setSession(IoSession session) {
		this.session = session;
	}
}
