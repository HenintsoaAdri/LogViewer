package agent;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.charset.Charset;
import java.util.Properties;

import javax.net.ssl.SSLContext;

import org.apache.mina.core.service.IoAcceptor;
import org.apache.mina.core.session.IdleStatus;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.filter.codec.serialization.ObjectSerializationEncoder;
import org.apache.mina.filter.codec.textline.TextLineDecoder;
import org.apache.mina.filter.logging.LoggingFilter;
import org.apache.mina.filter.ssl.SslFilter;
import org.apache.mina.filter.stream.FileRegionWriteFilter;
import org.apache.mina.transport.socket.nio.NioSocketAcceptor;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class Server {

    private final Logger LOGGER = LoggerFactory.getLogger(getClass());
	private int port = 2008;
	private IoAcceptor server;
	private Properties properties;
	
	public Server(Properties properties) {
		try {
			this.setProperties(properties);
			this.server = createServer(createSslFilter());
		} catch (Exception e) {
			// TODO: handle exception
		}
	}
	private IoAcceptor createServer(SslFilter sslFilter) {
		IoAcceptor acceptor = new NioSocketAcceptor();
		acceptor.getFilterChain().addLast( "sslFilter", sslFilter );
	 	acceptor.getFilterChain().addLast( "logger", new LoggingFilter() );
	 	ObjectSerializationEncoder encoder = new ObjectSerializationEncoder();
		acceptor.getFilterChain().addLast( "codec", new ProtocolCodecFilter(encoder, new TextLineDecoder(Charset.forName("UTF-8"))));
	 	acceptor.getFilterChain().addLast("fileRegionWrite", new FileRegionWriteFilter());
	 	acceptor.setHandler(new ServerHandler());
	    acceptor.getSessionConfig().setReadBufferSize(2048);
	    acceptor.getSessionConfig().setIdleTime(IdleStatus.BOTH_IDLE, 30);
		return acceptor;
 	}
	public SslFilter createSslFilter() throws Exception{
		SSLContext context = null;
		SslFilter filter = null;
		try {
			context = SSLContext.getInstance("TLS");
			context.init(null, null, null);
			filter = new SslFilter(context);
			return filter;
		} catch (Exception e) {
			LOGGER.error("Erreur initialisation du context SSL", e);
			throw e;
		}
	}
	private void setProperties(Properties properties) throws Exception {
		if(!properties.containsKey("ipAdress")){
			throw new Exception("la propriété 'ipAdress' est introuvable");
		}
		if(!properties.containsKey("path")){
			throw new Exception("la propriété 'path' est introuvable");
		}
		LOGGER.trace("Adresse IP : " + properties.getProperty("ipAdress"));
		LOGGER.trace("Dossier de log : " + properties.getProperty("path"));
		this.properties = properties;
		setPort(Integer.parseInt(properties.getProperty("port")));
	}
	public void start() throws IOException{
		server.bind(new InetSocketAddress("localhost", 2008));
	}
}
