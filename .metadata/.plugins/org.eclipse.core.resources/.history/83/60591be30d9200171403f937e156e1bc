package adri.logviewer.agent.client;

import java.io.IOException;
import java.net.InetSocketAddress;
import java.nio.charset.Charset;
import java.security.KeyManagementException;
import java.security.NoSuchAlgorithmException;

import javax.net.ssl.SSLContext;

import org.apache.mina.core.RuntimeIoException;
import org.apache.mina.core.future.ConnectFuture;
import org.apache.mina.core.future.ReadFuture;
import org.apache.mina.core.session.IoSession;
import org.apache.mina.filter.codec.ProtocolCodecFilter;
import org.apache.mina.filter.codec.serialization.ObjectSerializationDecoder;
import org.apache.mina.filter.codec.textline.TextLineEncoder;
import org.apache.mina.filter.logging.LoggingFilter;
import org.apache.mina.filter.ssl.SslFilter;
import org.apache.mina.transport.socket.nio.NioSocketConnector;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class MinaClient {

    private static final Logger LOGGER = LoggerFactory.getLogger(MinaClient.class);
    private NioSocketConnector client;
	private SslFilter sslFilter;
	IoSession session;
	
    public MinaClient(){
    	try{
    		setSslFilter(createSslFilter());
    		setClient(createClient());
    	}catch(Exception e){
            LOGGER.error("Création du client échoué.", e);
    	}
	}
	public void connect(String host, int port, String arg) throws Exception{
	    try {
		    for (;;) {
		        try {
		            ConnectFuture future = getClient().connect(new InetSocketAddress(host, port));
		            future.awaitUninterruptibly();
		            setSession(future.getSession());
		            getSession().getConfig().setUseReadOperation(true);
		            System.out.println("Connexion établie");
		            getSession().write(arg);
		    		ReadFuture read = getSession().read();
		    		read.awaitUninterruptibly();
		    		return read.getMessage();
		        } catch (RuntimeIoException e) {
		            LOGGER.error("Connexion échouée. Tentative de reconnexion...");
		            Thread.sleep(5000);
		        }
		    }
		} catch (Exception e) {
			e.printStackTrace();
			LOGGER.error("Connexion échouée", e);
			throw new Exception("Connexion échouée");
		}
	}
	public Object request(String file){
	    try {
		        try {
		            ConnectFuture future = getClient().connect(new InetSocketAddress(host, port));
		            future.awaitUninterruptibly();
		            setSession(future.getSession());
		            getSession().getConfig().setUseReadOperation(true);
		            System.out.println("Connexion établie");
		            getSession().write(file);
		    		ReadFuture read = getSession().read();
		    		read.awaitUninterruptibly();
		    		return read.getMessage();
		        } catch (RuntimeIoException e) {
		            LOGGER.error("Connexion échouée. Tentative de reconnexion...");
		            Thread.sleep(5000);
		        }
		} catch (Exception e) {
			e.printStackTrace();
			LOGGER.error("Connexion échouée", e);
			throw new Exception("Connexion échouée");
		}		
	}
	private NioSocketConnector getClient() {
		return client;
	}
	private void setClient(NioSocketConnector client) {
		this.client = client;
	}
	private SslFilter createSslFilter() throws NoSuchAlgorithmException, KeyManagementException {
	    SSLContext context = SSLContext.getInstance("TLS");
	    context.init(null, null, null);
	    SslFilter ssl = new SslFilter(context);
	    ssl.setUseClientMode(true);
	    return ssl;
	}
	private SslFilter getSslFilter() {
		return sslFilter;
	}
	private void setSslFilter(SslFilter sslFilter) {
		this.sslFilter = sslFilter;
	}
	private IoSession getSession() {
		return session;
	}
	private void setSession(IoSession session) {
		this.session = session;
	}
	private NioSocketConnector createClient() throws IOException{
		NioSocketConnector client = new NioSocketConnector();
		client.setConnectTimeoutMillis(30000);
	    client.setConnectTimeoutCheckInterval(5000);
		
		client.getFilterChain().addFirst("sslFilter",
	    		getSslFilter());
		ObjectSerializationDecoder decoder = new ObjectSerializationDecoder();
		decoder.setMaxObjectSize(50000000);
		client.getFilterChain().addLast( "codec", 
	    		new ProtocolCodecFilter(new TextLineEncoder(Charset.forName("UTF-8")), decoder));
		client.getFilterChain().addLast("logger", 
	    		new LoggingFilter());
	    
		client.setHandler(new MinaClientHandler());
	    return client;
	}
	public void closeSession(){
		if(this.getSession() != null){
			this.getSession().closeOnFlush();
		}
	}
	public void dispose(){
		if(this.getClient() != null){
			this.getClient().dispose();
		}
	}
}
